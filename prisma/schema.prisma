// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum VACANCY_TYPE {
  ON_SITE @map("on-site")
  REMOTE @map("remote")
}

enum VACANCY_LEVEL {
  FRESHERS @map("freshers")
  JUNIOR @map("junior")
  MID_LEVEL @map("mid-level")
  SENIOR @map("senior")
}

enum STATUS {
  PENDING @map("pending")
  APPROVED @map("approved")
  REJECTED @map("rejected")
}

enum ASSETS_TYPE {
  PROFILE_PIC @map("profile_pic")
  DOCUMENT @map("document")
  BANNER_IMAGE @map("banner_image")
  IMAGE @map("image")
}

model User {
  id String @id @default(uuid()) @db.Uuid

  firstName String
  lastName String
  email String @unique
  password String?
  address String?
  bio String?
  assets UserAssets[]
  phoneNumber String?
  refreshToken String?
  isVerified Boolean @default(false)
  isDeleted Boolean @default(false)
  provider String?
  providerID String?
  worksAtID String? @db.Uuid // this has no use right now.
  isBusinessAccount Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  businessAccount Business? @relation(name: "BusinessOwner")
}

model UserAssets {
  id String @id @default(uuid()) @db.Uuid
  secureUrl String
  publicId String?
  type ASSETS_TYPE
  format String?
  uploadedAt DateTime @default(now())

  user User @relation(fields: [userID], references: [id])
  userID String @db.Uuid
}

model Business {
  id String @id @default(uuid()) @db.Uuid
  
  name String
  website String?
  description String?
  address String
  phoneNumber String
  assets BusinessAssets[]
  vacancies Vacancy[]
  status STATUS @default(PENDING)
  isVerified Boolean @default(false)
  isDeleted Boolean @default(false)
  verifiedAt DateTime?

  owner User @relation(name: "BusinessOwner", fields: [userID], references: [id])
  userID String @unique @db.Uuid

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BusinessAssets {
  id String @id @default(uuid()) @db.Uuid
  secureUrl String
  publicId String
  type ASSETS_TYPE
  format String
  uploadedAt DateTime @default(now())
  status STATUS @default(PENDING)

  business Business @relation(fields: [businessID], references: [id])
  businessID String @db.Uuid
}

model Vacancy {
  id String @id @default(uuid()) @db.Uuid

  title String
  description String
  deadline DateTime
  tags String[]
  type VACANCY_TYPE
  level VACANCY_LEVEL[]
  assets VacancyAssets[]
  isActive Boolean @default(false)
  isDeleted Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  business Business @relation(fields: [businessID], references: [id])
  businessID String @db.Uuid
}

model VacancyAssets {
  id String @id @default(uuid()) @db.Uuid
  secureUrl String
  publicId String
  type ASSETS_TYPE
  format String
  uploadedAt DateTime @default(now())

  vacancy Vacancy @relation(fields: [vacancyID], references: [id])
  vacancyID String @db.Uuid
}

model Admin {
  id String @id @default(uuid()) @db.Uuid

  email String @unique
  firstName String
  lastName String
  password String
  address String?
  phoneNumber String?
  refreshToken String?
  assets AdminAssets[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AdminAssets {
  id String @id @default(uuid()) @db.Uuid
  secureUrl String
  publicId String?
  type ASSETS_TYPE
  format String?
  uploadedAt DateTime @default(now())

  admin Admin @relation(fields: [adminID], references: [id])
  adminID String @db.Uuid
}